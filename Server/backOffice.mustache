var express = require('express');
var router = express.Router();
var fs = require("fs");
var configs = JSON.parse(fs.readFileSync('./Server/config.json'));

{{#models}}
var {{title}} = require("../Models/{{title}}.js");
//var model{{title}} = JSON.parse(fs.readFileSync("../DBM/Publish/Schemas/{{title}}Schema.json"));
{{/models}}

{{#models}}

router.get('/{{title}}', function (req, res) {
    {{title}}.all(function (rows) {
        res.render('list', {
            title: '{{title}}',
            rows: rows.map(obj => {
                return {
                    properties: Object.keys(obj).map(key => {
                        return {
                            name: key,
                            value: obj[key]
                        }
                    }),
                    actions: [{
                        label: '',
                        link: './{{title}}/Details/' + obj.id,
                        image: {
                            src: '../images/read.png'
                        },
                        tooltip: 'Details'
                    }, {
                        label: '',
                        link: './{{title}}/Edit/' + obj.id,
                        image: {
                            src: '../images/edit.png'
                        },
                        tooltip: 'Edit'
                    }, {
                        label: '',
                        link: '#',
                        image: {
                            src: '../images/delete.png'
                        },
                        tooltip: 'Apagar',
                        events: [{
                            name: "onclick",
                            function: "apagar",
                            args: obj.id
                        }]

                    }]
                }
            }),
            columns: Object.keys(new {{title}}()).map(key => {
                return {
                    name: key
                };
            }),
            models: function() {
            return configs.models.map(elem =>{
                return {
                    name: elem.name,
                    href: elem.href
                }
            })
        }
        });
    });
});

router.get('/{{title}}/Details/:id', function (req, res) {
    {{title}}.get(req.params.id,function(row){
        if(row){
            res.render('details',{
                properties: Object.getOwnPropertyNames(row).map(key =>{
                    return {
                        name: key,
                        value: row[key]
                    };
                }),
                models: function() {
                    return configs.models.map(elem =>{
                     return {
                        name: elem.name,
                        href: elem.href
                        }
                    })
                }
            });

        }
    });
});

router.get('/{{title}}/Details/:id', function (req, res) {
    {{title}}.get(req.params.id, function (row) {
        res.render('details', {
            properties: function () {
                var allProps = Object.getOwnPropertyNames(row);
                var validProps = [];
                allProps.forEach(function (prop) {
                    if (model{{title}}.properties.hasOwnProperty(prop)) {
                        validProps.push({
                            name: prop,
                            value: row[prop]
                        });
                    }
            });
            return validProps;
            },
            references: function () {
            var allRefs = [];
                if (model{{title}}.references) {
                    model{{title}}.references.forEach(function (ref) {
                        allRefs.push({
                            label: ref.label,
                            model: "{{title}}",
                            values: ref.relation == "M-M" ? req.params.id + '/' + ref.model :
                            row[(ref.model + "_id").toLowerCase()]
                        });
                    });
                }
                return allRefs;
            },
            get hasReferences() {
                return this.references().length > 0;
            },
            models: function() {
            return configs.models.map(elem =>{
                return {
                    name: elem.name,
                    href: elem.href
                }
            })
        }
        })
    });
});


router.get('/{{title}}/Insert', function (req, res) {
    var obj = new {{title}}();
    res.render('form',{
        properties: Object.getOwnPropertyNames(obj).map(key =>{
                    return {
                        name: key,
                        value: obj[key]
                    };
        }),
        models: function() {
           return configs.models.map(elem =>{
                return {
                    name: elem.name,
                    href: elem.href
                }
            })
        }
    });
});

router.get('/{{title}}/Edit/:id', function (req, res) {
    {{title}}.get(req.params.id,function(row){
        if(row){
            res.render('form',{
                properties: Object.getOwnPropertyNames(row).map(key =>{
                    return {
                        name: key,
                        value: row[key]
                    };
                }),
                models: function() {
           return configs.models.map(elem =>{
                return {
                    name: elem.name,
                    href: elem.href
                }
            })
        }
            });

        }
    });
});

{{/models}}

module.exports = router;