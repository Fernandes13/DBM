function {{title}} ({{propertiesJoin}}) {
    {{#properties}}
        this.{{name}} = {{name}};
        {{^required}}Object.defineProperty(this,'{{name}}',{ enumerable:false, writable:true});{{/required}}         
    {{/properties}}
        Object.defineProperty(this,'{{primaryKey.name}}',{ enumerable:false, writable:true});
    {{#references}}
        Object.defineProperty(this,'{{name}}',{ enumerable:false, writable:true});
    {{/references}}    
}

var database = require('../Database/sqlite.js')('./Publish/Database/{{{dbname}}}');
var relationsName = require('../index.js');
relationsName = relationsName.relationsName;

{{title}}.all = function (callback) {
    database.all("SELECT * FROM {{table}}", {{title}}, callback);
}

{{title}}.get = function (id, callback) {
    database.get("SELECT * FROM {{table}} WHERE {{primaryKey.columnName}} = ?", [id],{{title}},callback);
}

{{title}}.prototype.save = function (callback) {
    if(this.{{primaryKey.name}}) { //Se existir valor no id será para UPDATE
       database.run("UPDATE {{table}} SET {{{propertiesSetValues}}} WHERE {{primaryKey.columnName}} = ?",[{{propertiesJoinThis}},this.{{primaryKey.name}}],callback);
    } else { //caso contrário para insert
        database.run("INSERT INTO {{table}} ({{propertiesJoin}}) VALUES ({{propertiesValuesParams}})", [{{propertiesJoinThis}}],callback);
    }
}

{{title}}.many = function (model,id,callback){
    var tableName = "{{table}} + '_' ${model}.toLowerCase() + 's'";
    var tableName2 = "${model}.toLowerCase() + 's_' + {{table}}";

    if(relationsName.includes(tableName)){
        database.where('SELECT {{table}}.* FROM {{table}} INNER JOIN ' +  tableName + ' ON ' + 
        tableName +'.{{primaryKey.columnName}} = {{table}}.{{primaryKey.columnName}} WHERE ' + tableName + '.${model.toLowerCase()}_id = ?', [id], Distributor, callback);
    }else{
        database.where('SELECT {{table}}.* FROM {{table}} INNER JOIN ' +  tableName2 + ' ON ' + 
        tableName2 +'.{{primaryKey.columnName}} = {{table}}.{{primaryKey.columnName}} WHERE ' + tableName2 + '.${model.toLowerCase()}_id = ?', [id], Distributor, callback);
    }

}


{{title}}.delete = function(id, callback){
    database.run("DELETE FROM {{table}} WHERE {{primaryKey.columnName}} = ?",[id],callback);  
}

{{title}}.mappingDBtoObject = {
    {{{mappingDBtoObject}}}{{#mappingReferences}} {{name}} {{name}} {{/mappingReferences}}
}

module.exports = {{title}};