var express = require('express');
var router = express.Router();
{{#models}}
var {{title}} = require('../Models/{{title}}');
{{/models}}

/**
* Método que faz o mapeamento entre um objeto retornado pelo módulo sqlite num objeto de uma classe
criada
* @param {any} object Representa o objeto retornado pela query à abse de dados
* @param {any} type Representa o tipo de objeto que se pretende converter
* @returns Devolve um objeto do tipo "type" com o conteúdo que está no objeto "object"
*/
function mapping(object, type) {
    var obj = new type();
    Object.keys(object).forEach(function (value) {
        if (obj.hasOwnProperty(value)) //Se o objeto possuir o atributo que se está a verificar então recebe o valor retornado da query da base de dados
            obj[value] = object[value];
        });
    return obj;
}

{{#models}}
router.post('/{{title}}', function(req,res){
    mapping(req.body,{{title}}).save(); //converte o objeto retornado no corpo do pedido num objeto do tipo {{title}}
});

router.get('/{{title}}', function(req,res){
    {{title}}.all(function(rows){//função de callback que quando for retornado os dados na base de dados, os mesmos serão enviados em json
        res.json(rows);
    });
});

router.get('/{{title}}/:id', function(req,res){
    {{title}}.get(req.params.id, function(rows){
        res.json(rows);
    });
});

router.put('/{{title}}/:id',function(req,res){ //o id tanto poderia ir no corpo da mensagem como por parâmetro no url

    var obj = mapping(req.body,{{title}});
    obj.id = req.params.id; //no caso de ir no corpo da mensagem tem de se fazer a atribuição do id após o mapeamento do objeto

    obj.save(function(err){ //devolve true em caso de ter feito o save sem qualquer erro
        res.json({
            sucess: !err
        });
    });
});

router.delete('/{{title}}/:id',function(req,res){
    {{title}}.delete(req.params.id, function(err){
        res.json({
            sucess: !err
        });
    });
});
{{/models}}

module.exports = router;